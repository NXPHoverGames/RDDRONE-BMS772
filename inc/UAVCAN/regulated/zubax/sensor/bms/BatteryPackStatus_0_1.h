/*
 *
 * BSD 3-Clause License
 * 
 * Copyright 2020 NXP 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * UAVCAN data structure definition.
 *
 * AUTOGENERATED, DO NOT EDIT.
 *
 * Source File:
 * /home/cis/drones/s32k-bms/software/rddrone-bms772/src/nxp_bms/BMS_v1/public_regulated_data_types/regulated/zubax/sensor/bms/BatteryPackStatus.0.1.uavcan
 *
 * Template:
 * StructureType.j2
 *
 * Generated at:  2020-11-06 07:34:56.235387 UTC
 * Is deprecated: no
 * Fixed port ID: None
 * Full name:     regulated.zubax.sensor.bms.BatteryPackStatus
 * Version:       0.1
 *
 */

#ifndef REGULATED_ZUBAX_SENSOR_BMS_BATTERYPACKSTATUS
#define REGULATED_ZUBAX_SENSOR_BMS_BATTERYPACKSTATUS
#include <canard_dsdl.h>

#include <uavcan/time/SynchronizedTimestamp_1_0.h>

#define REGULATED_ZUBAX_SENSOR_BMS_BATTERY_PACK_STATUS_MSG_SIZE 543



typedef struct regulated_zubax_sensor_bms_battery_pack_statusType
{
	uavcan_time_synchronized_timestamp timestamp;
	uint8_t state_of_charge;
	regulated_zubax_sensor_wattmeter_dcsample power;
	uavcan_si_unit_energy_scalar energy;
	uavcan_si_unit_energy_scalar full_energy;
	saturated_float1 temperature_min_max;
	bool charger_connected;
	bool temperature_hot;
	bool temperature_cold;
	bool overload;
	bool disbalance;
	bool balancing;
	bool needs_service;
	bool bms_error;
	uint16_t vendor_specific_status_code;
	saturated_float16_ cell_voltages;
} regulated_zubax_sensor_bms_battery_pack_status;

void regulated_zubax_sensor_bms_battery_pack_status_serializeToBuffer(regulated_zubax_sensor_bms_battery_pack_status* msg, uint8_t* const buffer, const size_t starting_bit)
{
    uavcan_time_synchronized_timestamp_serializeToBuffer(&msg->timestamp, buffer, starting_bit + 0);
	canardDSDLSetUxx(buffer, starting_bit + 56, msg->state_of_charge, 7);
    regulated_zubax_sensor_wattmeter_dcsample_serializeToBuffer(&msg->power, buffer, starting_bit + 64);
    uavcan_si_unit_energy_scalar_serializeToBuffer(&msg->energy, buffer, starting_bit + 128);
    uavcan_si_unit_energy_scalar_serializeToBuffer(&msg->full_energy, buffer, starting_bit + 160);
    saturated_float1_serializeToBuffer(&msg->temperature_min_max, buffer, starting_bit + 192);
	canardDSDLSetBit(buffer, starting_bit + 224, msg->charger_connected);
	canardDSDLSetBit(buffer, starting_bit + 225, msg->temperature_hot);
	canardDSDLSetBit(buffer, starting_bit + 226, msg->temperature_cold);
	canardDSDLSetBit(buffer, starting_bit + 227, msg->overload);
	canardDSDLSetBit(buffer, starting_bit + 228, msg->disbalance);
	canardDSDLSetBit(buffer, starting_bit + 229, msg->balancing);
	canardDSDLSetBit(buffer, starting_bit + 230, msg->needs_service);
	canardDSDLSetBit(buffer, starting_bit + 231, msg->bms_error);
	canardDSDLSetUxx(buffer, starting_bit + 240, msg->vendor_specific_status_code, 16);
    saturated_float16__serializeToBuffer(&msg->cell_voltages, buffer, starting_bit + 256);
}

void regulated_zubax_sensor_bms_battery_pack_status_deserializeFromBuffer(regulated_zubax_sensor_bms_battery_pack_status* msg, const uint8_t* const buffer, const size_t buf_size, const size_t starting_bit)
{

        
        uavcan_time_synchronized_timestamp_deserializeFromBuffer(&msg->timestamp, buffer, buf_size, starting_bit + 0);
	msg->state_of_charge = canardDSDLGetU8(buffer, buf_size, starting_bit + 56, 7);
        
        regulated_zubax_sensor_wattmeter_dcsample_deserializeFromBuffer(&msg->power, buffer, buf_size, starting_bit + 64);
        
        uavcan_si_unit_energy_scalar_deserializeFromBuffer(&msg->energy, buffer, buf_size, starting_bit + 128);
        
        uavcan_si_unit_energy_scalar_deserializeFromBuffer(&msg->full_energy, buffer, buf_size, starting_bit + 160);
        
        saturated_float1_deserializeFromBuffer(&msg->temperature_min_max, buffer, buf_size, starting_bit + 192);
	msg->charger_connected = canardDSDLGetBit(buffer, buf_size, starting_bit + 224);
	msg->temperature_hot = canardDSDLGetBit(buffer, buf_size, starting_bit + 225);
	msg->temperature_cold = canardDSDLGetBit(buffer, buf_size, starting_bit + 226);
	msg->overload = canardDSDLGetBit(buffer, buf_size, starting_bit + 227);
	msg->disbalance = canardDSDLGetBit(buffer, buf_size, starting_bit + 228);
	msg->balancing = canardDSDLGetBit(buffer, buf_size, starting_bit + 229);
	msg->needs_service = canardDSDLGetBit(buffer, buf_size, starting_bit + 230);
	msg->bms_error = canardDSDLGetBit(buffer, buf_size, starting_bit + 231);
	msg->vendor_specific_status_code = canardDSDLGetU16(buffer, buf_size, starting_bit + 240, 16);
        
        saturated_float16__deserializeFromBuffer(&msg->cell_voltages, buffer, buf_size, starting_bit + 256);

    return msg;
}

#endif // REGULATED_ZUBAX_SENSOR_BMS_BATTERYPACKSTATUS
