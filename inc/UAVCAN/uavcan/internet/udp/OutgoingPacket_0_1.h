/*
 *
 * BSD 3-Clause License
 * 
 * Copyright (c) 2020, NXP Drone and Rover Team
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * UAVCAN data structure definition.
 *
 * AUTOGENERATED, DO NOT EDIT.
 *
 * Source File:
 * /home/cis/drones/s32k-bms/software/rddrone-bms772/src/nxp_bms/BMS_v1/public_regulated_data_types/uavcan/internet/udp/32750.OutgoingPacket.0.1.uavcan
 *
 * Template:
 * StructureType.j2
 *
 * Generated at:  2020-11-02 13:23:11.466421 UTC
 * Is deprecated: no
 * Fixed port ID: 32750
 * Full name:     uavcan.internet.udp.OutgoingPacket
 * Version:       0.1
 *
 */

#ifndef UAVCAN_INTERNET_UDP_OUTGOINGPACKET
#define UAVCAN_INTERNET_UDP_OUTGOINGPACKET
#include <canard_dsdl.h>


#define UAVCAN_INTERNET_UDP_OUTGOING_PACKET_PORT_ID 32750

#define UAVCAN_INTERNET_UDP_OUTGOING_PACKET_MSG_SIZE 313

#define NAT_ENTRY_MIN_TTL 0x86400


typedef struct uavcan_internet_udp_outgoing_packetType
{
	uint16_t session_id;
	uint16_t destination_port;
	saturated_uint8_ destination_address;
	bool use_masquerading;
	bool use_dtls;
	saturated_uint8_ payload;
} uavcan_internet_udp_outgoing_packet;

void uavcan_internet_udp_outgoing_packet_serializeToBuffer(uavcan_internet_udp_outgoing_packet* msg, uint8_t* const buffer, const size_t starting_bit)
{
	canardDSDLSetUxx(buffer, starting_bit + 0, msg->session_id, 16);
	canardDSDLSetUxx(buffer, starting_bit + 16, msg->destination_port, 16);
    saturated_uint8__serializeToBuffer(&msg->destination_address, buffer, starting_bit + 32);
	canardDSDLSetBit(buffer, starting_bit + 400, msg->use_masquerading);
	canardDSDLSetBit(buffer, starting_bit + 401, msg->use_dtls);
    saturated_uint8__serializeToBuffer(&msg->payload, buffer, starting_bit + 408);
}

void uavcan_internet_udp_outgoing_packet_deserializeFromBuffer(uavcan_internet_udp_outgoing_packet* msg, const uint8_t* const buffer, const size_t buf_size, const size_t starting_bit)
{

	msg->session_id = canardDSDLGetU16(buffer, buf_size, starting_bit + 0, 16);
	msg->destination_port = canardDSDLGetU16(buffer, buf_size, starting_bit + 16, 16);
        
        saturated_uint8__deserializeFromBuffer(&msg->destination_address, buffer, buf_size, starting_bit + 32);
	msg->use_masquerading = canardDSDLGetBit(buffer, buf_size, starting_bit + 400);
	msg->use_dtls = canardDSDLGetBit(buffer, buf_size, starting_bit + 401);
        
        saturated_uint8__deserializeFromBuffer(&msg->payload, buffer, buf_size, starting_bit + 408);

    return msg;
}

#endif // UAVCAN_INTERNET_UDP_OUTGOINGPACKET
