/*
 *
 * BSD 3-Clause License
 * 
 * Copyright 2020 NXP 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * UAVCAN data structure definition.
 *
 * AUTOGENERATED, DO NOT EDIT.
 *
 * Source File:
 * /home/cis/drones/s32k-bms/software/rddrone-bms772/src/nxp_bms/BMS_v1/public_regulated_data_types/uavcan/register/Value.1.0.uavcan
 *
 * Template:
 * UnionType.j2
 *
 * Generated at:  2020-11-06 07:34:38.329031 UTC
 * Is deprecated: no
 * Fixed port ID: None
 * Full name:     uavcan.register.Value
 * Version:       1.0
 *
 */

#ifndef UAVCAN_REGISTER_VALUE
#define UAVCAN_REGISTER_VALUE
#include <canard_dsdl.h>

#include <uavcan/primitive/Empty_1_0.h>
#include <uavcan/primitive/String_1_0.h>
#include <uavcan/primitive/Unstructured_1_0.h>
#include <uavcan/primitive/array/Bit_1_0.h>
#include <uavcan/primitive/array/Integer64_1_0.h>
#include <uavcan/primitive/array/Integer32_1_0.h>
#include <uavcan/primitive/array/Integer16_1_0.h>
#include <uavcan/primitive/array/Integer8_1_0.h>
#include <uavcan/primitive/array/Natural64_1_0.h>
#include <uavcan/primitive/array/Natural32_1_0.h>
#include <uavcan/primitive/array/Natural16_1_0.h>
#include <uavcan/primitive/array/Natural8_1_0.h>
#include <uavcan/primitive/array/Real64_1_0.h>
#include <uavcan/primitive/array/Real32_1_0.h>
#include <uavcan/primitive/array/Real16_1_0.h>

#define UAVCAN_REGISTER_VALUE_MSG_SIZE 3603



typedef struct uavcan_register_valueType
{
#error "TODO: UnionType
} uavcan_register_value;

void uavcan_register_value_serializeToBuffer(uavcan_register_value* msg, uint8_t* const buffer, const size_t starting_bit)
{
    uavcan_primitive_empty_serializeToBuffer(&msg->empty, buffer, starting_bit + 0);
    uavcan_primitive_string_serializeToBuffer(&msg->string, buffer, starting_bit + 0);
    uavcan_primitive_unstructured_serializeToBuffer(&msg->unstructured, buffer, starting_bit + 2064);
    uavcan_primitive_array_bit_serializeToBuffer(&msg->bit, buffer, starting_bit + 4128);
    uavcan_primitive_array_integer64_serializeToBuffer(&msg->integer64, buffer, starting_bit + 6192);
    uavcan_primitive_array_integer32_serializeToBuffer(&msg->integer32, buffer, starting_bit + 8248);
    uavcan_primitive_array_integer16_serializeToBuffer(&msg->integer16, buffer, starting_bit + 10304);
    uavcan_primitive_array_integer8_serializeToBuffer(&msg->integer8, buffer, starting_bit + 12360);
    uavcan_primitive_array_natural64_serializeToBuffer(&msg->natural64, buffer, starting_bit + 14424);
    uavcan_primitive_array_natural32_serializeToBuffer(&msg->natural32, buffer, starting_bit + 16480);
    uavcan_primitive_array_natural16_serializeToBuffer(&msg->natural16, buffer, starting_bit + 18536);
    uavcan_primitive_array_natural8_serializeToBuffer(&msg->natural8, buffer, starting_bit + 20592);
    uavcan_primitive_array_real64_serializeToBuffer(&msg->real64, buffer, starting_bit + 22656);
    uavcan_primitive_array_real32_serializeToBuffer(&msg->real32, buffer, starting_bit + 24712);
    uavcan_primitive_array_real16_serializeToBuffer(&msg->real16, buffer, starting_bit + 26768);
}

void uavcan_register_value_deserializeFromBuffer(uavcan_register_value* msg, const uint8_t* const buffer, const size_t buf_size, const size_t starting_bit)
{

        
        uavcan_primitive_empty_deserializeFromBuffer(&msg->empty, buffer, buf_size, starting_bit + 0);
        
        uavcan_primitive_string_deserializeFromBuffer(&msg->string, buffer, buf_size, starting_bit + 0);
        
        uavcan_primitive_unstructured_deserializeFromBuffer(&msg->unstructured, buffer, buf_size, starting_bit + 2064);
        
        uavcan_primitive_array_bit_deserializeFromBuffer(&msg->bit, buffer, buf_size, starting_bit + 4128);
        
        uavcan_primitive_array_integer64_deserializeFromBuffer(&msg->integer64, buffer, buf_size, starting_bit + 6192);
        
        uavcan_primitive_array_integer32_deserializeFromBuffer(&msg->integer32, buffer, buf_size, starting_bit + 8248);
        
        uavcan_primitive_array_integer16_deserializeFromBuffer(&msg->integer16, buffer, buf_size, starting_bit + 10304);
        
        uavcan_primitive_array_integer8_deserializeFromBuffer(&msg->integer8, buffer, buf_size, starting_bit + 12360);
        
        uavcan_primitive_array_natural64_deserializeFromBuffer(&msg->natural64, buffer, buf_size, starting_bit + 14424);
        
        uavcan_primitive_array_natural32_deserializeFromBuffer(&msg->natural32, buffer, buf_size, starting_bit + 16480);
        
        uavcan_primitive_array_natural16_deserializeFromBuffer(&msg->natural16, buffer, buf_size, starting_bit + 18536);
        
        uavcan_primitive_array_natural8_deserializeFromBuffer(&msg->natural8, buffer, buf_size, starting_bit + 20592);
        
        uavcan_primitive_array_real64_deserializeFromBuffer(&msg->real64, buffer, buf_size, starting_bit + 22656);
        
        uavcan_primitive_array_real32_deserializeFromBuffer(&msg->real32, buffer, buf_size, starting_bit + 24712);
        
        uavcan_primitive_array_real16_deserializeFromBuffer(&msg->real16, buffer, buf_size, starting_bit + 26768);

    return msg;
}

#endif // UAVCAN_REGISTER_VALUE
